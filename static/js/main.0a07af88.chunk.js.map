{"version":3,"sources":["context.js","todo/TodoItem.js","todo/TodoList.js","todo/AddTodo.js","Mode.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","checkbox","marginRight","delete","background","color","paddingBottom","cursor","outline","userSelect","TodoItem","todo","index","toggleCompleted","classes","removeTodo","useContext","completed","push","style","className","join","checked","type","onChange","id","text","onClick","ul","listStyle","margin","TodoList","todos","map","key","AddTodo","addTodo","useState","value","setValue","onSubmit","event","preventDefault","e","target","Mode","toggleMode","mode","modal","disabled","xmlns","isolation","viewBox","d","fill","stroke","strokeWidth","strokewinecap","strokewiterlimit","Modal","closeModal","flexDirection","App","setTodos","setMode","setModal","useEffect","raw","localStorage","getItem","JSON","parse","setItem","stringify","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a07af88.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport Context from \"../context\";\r\n\r\nconst styles = {\r\n  li: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    marginBottom: \".5rem\"\r\n  },\r\n  checkbox: {\r\n    marginRight: \"1rem\"\r\n  },\r\n  delete: {\r\n    borderRadius: \"50%\",\r\n    background: \"#ff5c5c\",\r\n    border: \"none\",\r\n    color: \"#fff\",\r\n    paddingBottom: \"3px\",\r\n    cursor: \"pointer\",\r\n    outline: \"none\",\r\n    userSelect: \"none\"\r\n  }\r\n};\r\n\r\nlet TodoItem = ({ todo, index, toggleCompleted }) => {\r\n  const classes = [];\r\n  const { removeTodo } = useContext(Context);\r\n\r\n  if (todo.completed) {\r\n    classes.push(\"done\");\r\n  }\r\n\r\n  return (\r\n    <li style={styles.li} className=\"liDark\">\r\n      <span className={classes.join(\" \")}>\r\n        <input\r\n          checked={todo.completed}\r\n          style={styles.checkbox}\r\n          type=\"checkbox\"\r\n          onChange={() => toggleCompleted(todo.id)}\r\n          className=\"inputDark\"\r\n        />\r\n        <strong>{index + 1}</strong>\r\n        &nbsp;\r\n        {todo.text}\r\n      </span>\r\n      <button onClick={() => removeTodo(todo.id)} style={styles.delete}>\r\n        &#x02717;\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n};\r\n\r\nconst TodoList = ({ todos, toggleCompleted }) => {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            toggleCompleted={toggleCompleted}\r\n            todo={todo}\r\n            index={index}\r\n            key={todo.id}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\n\r\nlet AddTodo = ({ addTodo }) => {\r\n  let [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (value) {\r\n      addTodo(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={\"form\"}\r\n      style={{ marginBottom: \"8px\" }}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <button className=\"addTodoButton\" type=\"submit\">\r\n        &#x0002B;\r\n      </button>\r\n      <input\r\n        className=\"addTodoInput\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport \"./Mode.css\";\r\n\r\nlet Mode = ({ toggleMode, mode, modal }) => {\r\n  return (\r\n    <div className=\"switch_box box_3\">\r\n      <div className=\"toggle_switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"switch_3\"\r\n          onChange={toggleMode}\r\n          checked={mode}\r\n          disabled={modal}\r\n        />\r\n        <svg\r\n          className=\"checkbox\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          style={{ isolation: \"isolate\" }}\r\n          viewBox=\"0 0 168 80\"\r\n        >\r\n          <path\r\n            className=\"outer-ring\"\r\n            d=\"M41.534 9h88.932c17.51 0 31.724 13.658 31.724 30.482 0 16.823-14.215 30.48-31.724 30.48H41.534c-17.51 0-31.724-13.657-31.724-30.48C9.81 22.658 24.025 9 41.534 9z\"\r\n            fill=\"none\"\r\n            stroke=\"#233043\"\r\n            strokeWidth=\"3\"\r\n            strokewinecap=\"square\"\r\n            strokewiterlimit=\"3\"\r\n          />\r\n          <path\r\n            className=\"is_checked\"\r\n            d=\"M17 39.482c0-12.694 10.306-23 23-23s23 10.306 23 23-10.306 23-23 23-23-10.306-23-23z\"\r\n          />\r\n          <path\r\n            className=\"is_unchecked\"\r\n            d=\"M132.77 22.348c7.705 10.695 5.286 25.617-5.417 33.327-2.567 1.85-5.38 3.116-8.288 3.812 7.977 5.03 18.54 5.024 26.668-.83 10.695-7.706 13.122-22.634 5.418-33.33-5.855-8.127-15.88-11.474-25.04-9.23 2.538 1.582 4.806 3.676 6.66 6.25z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mode;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nlet Modal = ({ closeModal }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-body\">\r\n        <span\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          <span onClick={closeModal} className=\"modalClose\">\r\n            &#x02717;\r\n          </span>\r\n\r\n          <h1>Todo List</h1>\r\n        </span>\r\n        <p>&copy; Made by Nikita Dvortsov</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from \"react\";\nimport TodoList from \"./todo/TodoList\";\nimport Context from \"./context\";\nimport AddTodo from \"./todo/AddTodo\";\nimport Mode from \"./Mode\";\nimport Modal from \"./Modal/Modal\";\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [mode, setMode] = useState(true);\n  const [modal, setModal] = useState(false);\n\n  useEffect(() => {\n    const raw = localStorage.getItem(\"todos\");\n    setTodos(JSON.parse(raw));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const toggleCompleted = id => {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const addTodo = text => {\n    setTodos(todos.concat([{ id: Date.now(), completed: false, text }]));\n  };\n\n  const toggleMode = () => {\n    setMode(!mode);\n  };\n\n  const toggleModal = () => {\n    setModal(true);\n  };\n\n  const closeModal = () => {\n    setModal(false);\n  };\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className={mode ? \"light\" : \"dark\"}>\n        <div className=\"aboutAuthor\">\n          <span onClick={toggleModal} className=\"aboutAuthorButton\">\n            Project Card\n          </span>\n          <Mode toggleMode={toggleMode} mode={mode} modal={modal} />\n        </div>\n\n        <div className=\"wrapper\">\n          <h1>Todo List</h1>\n          {modal && <Modal closeModal={closeModal} />}\n          <AddTodo addTodo={addTodo} />\n          {todos.length ? (\n            <TodoList toggleCompleted={toggleCompleted} todos={todos} />\n          ) : (\n            <p\n              className=\"addSomeTodosDark\"\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\"\n              }}\n            >\n              Add some todos...\n            </p>\n          )}\n        </div>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}